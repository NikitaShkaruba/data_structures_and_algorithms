////////////////////////// Leetcode library //////////////////////////

//////////////////////////////////////////////////////////////////////
// This is my auto-generated template that I use when leetcoding.   //
//                                                                  //
// Standard go library is pretty weak and inconvenient, so I've     //
// decided to write a good library myself. I copy paste this        //
// template every time I'm when writing a solution and enjoy fully  //
// working data structures with good interfaces in go.              //
//                                                                  //
// Source code:                                                     //
// https://github.com/NikitaShkaruba/data_structures_and_algorithms //
//                                                                  //
// Library usage example:                                           //
// https://leetcode.com/submissions/detail/978392175                //
//////////////////////////////////////////////////////////////////////

////////////////////// AVL tree //////////////////////

// Code for AVL tree was copied from the internet and refactored, because of that it's not of the highest quality

// AvlTree is a data structure that can retrieve the min/max element in O(logn) time, O(1) space, and insert a new element in O(logn) time, O(1) space
type AvlTree[T comparable] struct {
	root       *AvlTreeNode[T]
	size       int
	comparator func(a, b T) int
}

// NewEmptyAvlTree works in O(1) time, O(1) space
// lessComparator should return 1 if a > b, -1 if a < b, and 0 if a == b
func NewEmptyAvlTree[T comparable](lessComparator func(a, b T) int) *AvlTree[T] {
	return NewAvlTreeFromArray(make([]T, 0), lessComparator)
}

// NewAvlTreeFromArray works in O(n*logn) time, O(n) space
// lessComparator should return 1 if a > b, -1 if a < b, and 0 if a == b
func NewAvlTreeFromArray[T comparable](arr []T, lessComparator func(a, b T) int) *AvlTree[T] {
	t := &AvlTree[T]{
		comparator: lessComparator,
	}

	for _, val := range arr {
		t.Insert(val)
	}

	return t
}

// Insert works in O(logn) time, O(n) space
func (t *AvlTree[T]) Insert(value T) {
	added := false
	t.root = insertNode(t.root, value, &added, t.comparator)
	if added {
		t.size++
	}
}

// Delete works in O(logn) time, O(n) space
func (t *AvlTree[T]) Delete(value T) {
	deleted := false
	t.root = deleteNode(t.root, value, &deleted)
	if deleted {
		t.size--
	}
}

// Contains works in O(logn) time, O(n) space
func (t *AvlTree[T]) Contains(value T) bool {
	var node *AvlTreeNode[T]

	if t.root != nil {
		node = t.root.get(value)
	}

	if node == nil {
		return false
	}

	return true
}

// GetMin works in O(logn) time, O(n) space
func (t *AvlTree[T]) GetMin() T {
	if t.root == nil {
		return *new(T)
	}

	var beginning = t.root
	for beginning.left != nil {
		beginning = beginning.left
	}

	if beginning == nil {
		for beginning.right != nil {
			beginning = beginning.right
		}
	}

	if beginning == nil {
		return *new(T)
	}

	return beginning.Value
}

// GetMax works in O(logn) time, O(n) space
func (t *AvlTree[T]) GetMax() T {
	if t.root == nil {
		return *new(T)
	}

	var beginning = t.root
	for beginning.right != nil {
		beginning = beginning.right
	}

	if beginning == nil {
		for beginning.left != nil {
			beginning = beginning.left
		}
	}

	if beginning == nil {
		return *new(T)
	}

	return beginning.Value
}

// GetSize works in O(1) time, O(n) space
func (t *AvlTree[T]) GetSize() int {
	return t.size
}

////////////////////// AVL Tree Node //////////////////////

type AvlTreeNode[T comparable] struct {
	Value      T
	left       *AvlTreeNode[T]
	right      *AvlTreeNode[T]
	height     int
	comparator func(a, b T) int
}

func (n *AvlTreeNode[T]) init() *AvlTreeNode[T] {
	n.height = 1
	n.left = nil
	n.right = nil
	return n
}

func (n *AvlTreeNode[T]) get(val T) *AvlTreeNode[T] {
	var node *AvlTreeNode[T]

	compareResult := n.comparator(val, n.Value)
	if compareResult < 0 {
		if n.left != nil {
			node = n.left.get(val)
		}
	} else if compareResult > 0 {
		if n.right != nil {
			node = n.right.get(val)
		}
	} else {
		node = n
	}

	return node
}

func (n *AvlTreeNode[T]) rotateRight() *AvlTreeNode[T] {
	leftNode := n.left

	// Rotation
	leftNode.right, n.left = n, leftNode.right

	// Update heights
	n.height = n.getMaxHeight() + 1
	leftNode.height = leftNode.getMaxHeight() + 1

	return leftNode
}

func (n *AvlTreeNode[T]) rotateLeft() *AvlTreeNode[T] {
	rightNode := n.right

	// Rotation
	rightNode.left, n.right = n, rightNode.left

	// Update heights
	n.height = n.getMaxHeight() + 1
	rightNode.height = rightNode.getMaxHeight() + 1

	return rightNode
}

func (n *AvlTreeNode[T]) getMin() *AvlTreeNode[T] {
	current := n
	for current.left != nil {
		current = current.left
	}
	return current
}

func (n *AvlTreeNode[T]) getMaxHeight() int {
	rightHeight := getHeight(n.right)
	leftHeight := getHeight(n.left)

	if rightHeight > leftHeight {
		return rightHeight
	} else {
		return leftHeight
	}
}

////////////////////// Helper functions //////////////////////

func insertNode[T comparable](n *AvlTreeNode[T], value T, added *bool, comparator func(a, b T) int) *AvlTreeNode[T] {
	if n == nil {
		*added = true
		return (&AvlTreeNode[T]{
			Value:      value,
			comparator: comparator,
		}).init()
	}
	c := n.comparator(value, n.Value)
	if c > 0 {
		n.right = insertNode(n.right, value, added, comparator)
	} else if c < 0 {
		n.left = insertNode(n.left, value, added, comparator)
	} else {
		n.Value = value
		*added = false
		return n
	}

	n.height = n.getMaxHeight() + 1
	c = getChildrenHeightDiff[T](n)

	if c > 1 {
		c = n.left.comparator(value, n.left.Value)
		if c < 0 {
			return n.rotateRight()
		} else if c > 0 {
			n.left = n.left.rotateLeft()
			return n.rotateRight()
		}
	} else if c < -1 {
		c = n.right.comparator(value, n.right.Value)
		if c > 0 {
			return n.rotateLeft()
		} else if c < 0 {
			n.right = n.right.rotateRight()
			return n.rotateLeft()
		}
	}
	return n
}

func deleteNode[T comparable](n *AvlTreeNode[T], value T, deleted *bool) *AvlTreeNode[T] {
	if n == nil {
		return n
	}

	c := n.comparator(value, n.Value)

	if c < 0 {
		n.left = deleteNode(n.left, value, deleted)
	} else if c > 0 {
		n.right = deleteNode(n.right, value, deleted)
	} else {
		if n.left == nil {
			t := n.right
			n.init()
			*deleted = true
			return t
		} else if n.right == nil {
			t := n.left
			n.init()
			*deleted = true
			return t
		} else {
			t := n.right.getMin()
			n.Value = t.Value
			n.right = deleteNode(n.right, t.Value, deleted)
			*deleted = true
		}
	}

	//re-getChildrenHeightDiff
	if n == nil {
		return n
	}
	n.height = n.getMaxHeight() + 1
	bal := getChildrenHeightDiff(n)
	if bal > 1 {
		if getChildrenHeightDiff(n.left) >= 0 {
			return n.rotateRight()
		}
		n.left = n.left.rotateLeft()
		return n.rotateRight()
	} else if bal < -1 {
		if getChildrenHeightDiff(n.right) <= 0 {
			return n.rotateLeft()
		}
		n.right = n.right.rotateRight()
		return n.rotateLeft()
	}

	return n
}

func getHeight[T comparable](n *AvlTreeNode[T]) int {
	if n != nil {
		return n.height
	}

	return 0
}

func getChildrenHeightDiff[T comparable](n *AvlTreeNode[T]) int {
	if n == nil {
		return 0
	}

	return getHeight(n.left) - getHeight(n.right)
}

////////////////////// Deque //////////////////////

// Deque is a double ended queue that can push and pop from both ends for O(1) time, O(1) space
type Deque[T any] struct {
	headSentinel *DoublyLinkedListNode[T]
	tailSentinel *DoublyLinkedListNode[T]
	size         int
}

// NewEmptyDeque works in O(1) time, O(1) space
func NewEmptyDeque[T any]() *Deque[T] {
	return NewDequeFromArray(make([]T, 0))
}

// NewDequeFromArray works in O(n) time, O(n) space
func NewDequeFromArray[T any](arr []T) *Deque[T] {
	headSentinel, tailSentinel := NewDoublyLinkedList(arr)

	return &Deque[T]{
		headSentinel: headSentinel,
		tailSentinel: tailSentinel,
		size:         len(arr),
	}
}

// PushFront works in O(1) time, O(1) space
func (d *Deque[T]) PushFront(val T) {
	newNode := NewDoublyLinkedListNode(val, d.headSentinel, d.headSentinel.Next)
	d.headSentinel.Next, d.headSentinel.Next.Prev = newNode, newNode

	d.size++
}

// PushBack works in O(1) time, O(1) space
func (d *Deque[T]) PushBack(val T) {
	newNode := NewDoublyLinkedListNode(val, d.tailSentinel.Prev, d.tailSentinel)
	d.tailSentinel.Prev, d.tailSentinel.Prev.Next = newNode, newNode

	d.size++
}

// PopFront works in O(1) time, O(1) space
func (d *Deque[T]) PopFront() T {
	nodeToPop := d.headSentinel.Next

	d.headSentinel.Next, d.headSentinel.Next.Next.Prev = d.headSentinel.Next.Next, d.headSentinel
	nodeToPop.Next, nodeToPop.Prev = nil, nil

	d.size--

	return nodeToPop.Val
}

// PopBack works in O(1) time, O(1) space
func (d *Deque[T]) PopBack() T {
	nodeToPop := d.tailSentinel.Prev

	d.tailSentinel.Prev, d.tailSentinel.Prev.Prev.Next = d.tailSentinel.Prev.Prev, d.tailSentinel
	nodeToPop.Prev, nodeToPop.Next = nil, nil

	d.size--

	return nodeToPop.Val
}

// PeekFront works in O(1) time, O(1) space
func (d *Deque[T]) PeekFront() T {
	return d.headSentinel.Next.Val
}

// PeekBack works in O(1) time, O(1) space
func (d *Deque[T]) PeekBack() T {
	return d.tailSentinel.Prev.Val
}

// GetSize works in O(1) time, O(1) space
func (d *Deque[T]) GetSize() int {
	return d.size
}

////////////////////// Doubly Linked List //////////////////////

// DoublyLinkedListNode is a linked list node with pointers to the previous and next nodes
type DoublyLinkedListNode[T any] struct {
	Val  T
	Prev *DoublyLinkedListNode[T]
	Next *DoublyLinkedListNode[T]
}

// NewDoublyLinkedListNode works in O(1) time, O(1) space
func NewDoublyLinkedListNode[T any](val T, prev *DoublyLinkedListNode[T], next *DoublyLinkedListNode[T]) *DoublyLinkedListNode[T] {
	return &DoublyLinkedListNode[T]{
		Val:  val,
		Prev: prev,
		Next: next,
	}
}

// NewSentinelDoublyLinkedListNode works in O(1) time, O(1) space
func NewSentinelDoublyLinkedListNode[T any]() *DoublyLinkedListNode[T] {
	return &DoublyLinkedListNode[T]{
		Val: *new(T),
	}
}

// NewDoublyLinkedList works in O(n) time, O(n) space
func NewDoublyLinkedList[T any](arr []T) (*DoublyLinkedListNode[T], *DoublyLinkedListNode[T]) {
	headSentinel := NewSentinelDoublyLinkedListNode[T]()
	tailSentinel := NewSentinelDoublyLinkedListNode[T]()
	headSentinel.Next, tailSentinel.Prev = tailSentinel, headSentinel

	for _, n := range arr {
		newNode := NewDoublyLinkedListNode(n, tailSentinel.Prev, tailSentinel)
		tailSentinel.Prev.Next, tailSentinel.Prev = newNode, newNode
	}

	return headSentinel, tailSentinel
}


////////////////////// Heap //////////////////////

// Heap is a data structure that can retrieve the min/max element in O(logn) time, O(1) space, and insert a new element in O(logn) time, O(1) space
type Heap[T any] struct {
	adapter *stdlibHeapAdapter[T]
}

// NewEmptyHeap creates a new empty heap in O(1) time, O(1) space
// comparator should contain a < b if you want a min heap, and a > b if you want a max heap
func NewEmptyHeap[T any](comparator func(a, b T) bool) *Heap[T] {
	return NewHeapFromArray(make([]T, 0), comparator)
}

// NewHeapFromArray creates a new heap from the given array in O(n) time, O(n) space
// comparator should contain a < b if you want a min heap, and a > b if you want a max heap
func NewHeapFromArray[T any](arr []T, comparator func(a, b T) bool) *Heap[T] {
	return &Heap[T]{
		adapter: newStdlibHeapAdapter(arr, comparator),
	}
}

// Push works in O(logn) time, O(1) space
func (h *Heap[T]) Push(val T) {
	heap.Push(h.adapter, val)
}

// Pop works in O(logn) time, O(1) space
func (h *Heap[T]) Pop() T {
	return heap.Pop(h.adapter).(T)
}

// Peek works in O(1) time, O(1) space
func (h *Heap[T]) Peek() T {
	return h.adapter.Peek().(T)
}

// GetSize works in O(1) time, O(1) space
func (h *Heap[T]) GetSize() int {
	return h.adapter.Len()
}

////////////////////// Stdlib Heap Adapter //////////////////////

// stdlibHeapAdapter is needed to not implement the whole heap yourself.
// std library has a semi-convenient (not) interface that does all the dirty work for you.
// I don't like it at all, but it works.
type stdlibHeapAdapter[T any] struct {
	arr        []T
	comparator func(i, j T) bool
}

func newStdlibHeapAdapter[T any](arr []T, comparator func(a, b T) bool) *stdlibHeapAdapter[T] {
	a := &stdlibHeapAdapter[T]{
		arr:        arr,
		comparator: comparator,
	}
	heap.Init(a)

	return a
}

func (a stdlibHeapAdapter[T]) Less(i, j int) bool {
	return a.comparator(a.arr[i], a.arr[j])
}

func (a *stdlibHeapAdapter[T]) Push(x interface{}) {
	a.arr = append(a.arr, x.(T))
}

func (a *stdlibHeapAdapter[T]) Pop() interface{} {
	res := a.arr[len(a.arr)-1]
	a.arr = a.arr[:len(a.arr)-1]
	return res
}

func (a *stdlibHeapAdapter[T]) Peek() interface{} {
	return a.arr[0]
}

func (a stdlibHeapAdapter[T]) Swap(i, j int) {
	a.arr[i], a.arr[j] = a.arr[j], a.arr[i]
}

func (a stdlibHeapAdapter[T]) Len() int {
	return len(a.arr)
}


////////////////////// Indexed Heap //////////////////////

// IndexedHeap is almost identical to Heap, but allows to remove elements by value for O(logn) time, O(1) space.
// Also, it doesn't spend memory for storing duplicate values.
type IndexedHeap[T comparable] struct {
	adapter     *stdlibIndexedHeapAdapter[T]
	valueCounts map[T]int
	size        int
}

// NewEmptyIndexedHeap works in O(1) time, O(1) space
func NewEmptyIndexedHeap[T comparable](comparator func(a, b T) bool) *IndexedHeap[T] {
	return NewIndexedHeapFromArray(make([]T, 0), comparator)
}

// NewIndexedHeapFromArray works in O(n) time, O(n) space
func NewIndexedHeapFromArray[T comparable](arr []T, comparator func(a, b T) bool) *IndexedHeap[T] {
	uniqueValues := make([]T, 0)
	valueCounts := make(map[T]int)
	for _, n := range arr {
		if valueCounts[n] == 0 {
			uniqueValues = append(uniqueValues, n)
		}
		valueCounts[n]++
	}

	return &IndexedHeap[T]{
		adapter:     newStdlibIndexedHeapAdapter(uniqueValues, comparator),
		valueCounts: valueCounts,
		size:        len(arr),
	}
}

// Push works in O(logn) time, O(1) space
func (h *IndexedHeap[T]) Push(val T) {
	if h.valueCounts[val] == 0 {
		heap.Push(h.adapter, val)
	}

	h.valueCounts[val]++
	h.size++
}

// Pop works in O(logn) time, O(1) space
func (h *IndexedHeap[T]) Pop() T {
	val := h.adapter.Peek().(T)

	h.valueCounts[val]--
	if h.valueCounts[val] == 0 {
		heap.Pop(h.adapter)
		delete(h.valueCounts, val)
	}

	h.size--

	return val
}

// Peek works in O(logn) time, O(1) space
func (h *IndexedHeap[T]) Peek() T {
	return h.adapter.Peek().(T)
}

// RemoveByValue works in O(logn) time, O(1) space
func (h *IndexedHeap[T]) RemoveByValue(val T) bool {
	if h.valueCounts[val] == 0 {
		return false
	}

	h.valueCounts[val]--
	if h.valueCounts[val] == 0 {
		h.adapter.removeByValue(val)
		delete(h.valueCounts, val)
	}

	h.size--

	return true
}

// GetSize works in O(1) time, O(1) space
func (h *IndexedHeap[T]) GetSize() int {
	return h.size
}

////////////////////// Stdlib Indexed Heap Adapter //////////////////////

// stdlibIndexedHeapAdapter is needed to not implement the whole heap yourself.
// std library has a semi-convenient (not) interface that does all the dirty work for you.
// I don't like it at all, but it works.
type stdlibIndexedHeapAdapter[T comparable] struct {
	values       []T
	valueIndexes map[T]int
	comparator   func(i, j T) bool
}

func newStdlibIndexedHeapAdapter[T comparable](arr []T, comparator func(a, b T) bool) *stdlibIndexedHeapAdapter[T] {
	valueIndexes := make(map[T]int)
	for i := range arr {
		valueIndexes[arr[i]] = i
	}

	a := &stdlibIndexedHeapAdapter[T]{
		values:       arr,
		valueIndexes: valueIndexes,
		comparator:   comparator,
	}
	heap.Init(a)

	return a
}

func (a stdlibIndexedHeapAdapter[T]) Less(i, j int) bool {
	return a.comparator(a.values[i], a.values[j])
}

func (a *stdlibIndexedHeapAdapter[T]) Push(x interface{}) {
	val := x.(T)

	a.values = append(a.values, val)
	a.valueIndexes[val] = len(a.values) - 1
}

func (a *stdlibIndexedHeapAdapter[T]) Pop() interface{} {
	val := (a.values)[len(a.values)-1]

	a.values = a.values[:len(a.values)-1]
	delete(a.valueIndexes, val)

	return val
}

func (a *stdlibIndexedHeapAdapter[T]) Peek() interface{} {
	return a.values[0]
}

func (a stdlibIndexedHeapAdapter[T]) Swap(i, j int) {
	a.valueIndexes[a.values[i]], a.valueIndexes[a.values[j]] = a.valueIndexes[a.values[j]], a.valueIndexes[a.values[i]]
	a.values[i], a.values[j] = a.values[j], a.values[i]
}

func (a stdlibIndexedHeapAdapter[T]) Len() int {
	return len(a.values)
}

func (a *stdlibIndexedHeapAdapter[T]) removeByValue(val T) {
	i, ok := a.valueIndexes[val]
	if !ok {
		return
	}

	heap.Remove(a, i)
}

////////////////////// Queue //////////////////////

// Queue is a data structure that implements LILO (last in, last out) interface
type Queue[T any] struct {
	deque *Deque[T]
}

// NewEmptyQueue works in O(1) time, O(1) space
func NewEmptyQueue[T any]() *Queue[T] {
	return NewQueueFromArray(make([]T, 0))
}

// NewQueueFromArray works in O(n) time, O(n) space
func NewQueueFromArray[T any](arr []T) *Queue[T] {
	return &Queue[T]{
		deque: NewDequeFromArray[T](arr),
	}
}

// Enqueue works in O(1) time, O(1) space
func (q *Queue[T]) Enqueue(val T) {
	q.deque.PushBack(val)
}

// Dequeue works in O(1) time, O(1) space
func (q *Queue[T]) Dequeue() T {
	return q.deque.PopFront()
}

// PeekFirst works in O(1) time, O(1) space
func (q *Queue[T]) PeekFirst() T {
	return q.deque.PeekFront()
}

// PeekLast works in O(1) time, O(1) space
func (q *Queue[T]) PeekLast() T {
	return q.deque.PeekBack()
}

// GetSize works in O(1) time, O(1) space
func (q *Queue[T]) GetSize() int {
	return q.deque.GetSize()
}


////////////////////// Segment Tree //////////////////////

type SegmentTree[T Ordered] struct {
	nums []T
	root *segment[T]
}

// NewSegmentTree works in O(n) time, O(logn) space
func NewSegmentTree[T Ordered](nums []T) *SegmentTree[T] {
	return &SegmentTree[T]{
		nums: nums,
		root: newSegment(0, len(nums)-1, nums),
	}
}

// Update works in O(logn) time, O(1) space
func (t *SegmentTree[T]) Update(i int, val T) {
	diff := val - t.nums[i]

	t.nums[i] = val

	cur := t.root
	for cur != nil {
		cur.sum += diff

		var nextCur *segment[T]
		if cur.leftSegment != nil && cur.leftSegment.l <= i && i <= cur.leftSegment.r {
			nextCur = cur.leftSegment
		} else if cur.rightSegment != nil && cur.rightSegment.l <= i && i <= cur.rightSegment.r {
			nextCur = cur.rightSegment
		}

		cur = nextCur
	}
}

// GetRangeSum works in O(logn) time, O(logn) space
func (t *SegmentTree[T]) GetRangeSum(l int, r int) T {
	return t.root.sumRange(l, r)
}

// GetFullRangeSum works in O(logn) time, O(logn) space
func (t *SegmentTree[T]) GetFullRangeSum() T {
	return t.GetRangeSum(0, len(t.nums)-1)
}

////////////////////// Segment //////////////////////

type segment[T Ordered] struct {
	l, r         int
	sum          T
	leftSegment  *segment[T]
	rightSegment *segment[T]
}

func newSegment[T Ordered](l, r int, nums []T) *segment[T] {
	if l == r {
		return &segment[T]{
			l:   l,
			r:   r,
			sum: nums[l],
		}
	}

	m := l + (r-l)/2
	left := newSegment(l, m, nums)
	right := newSegment(m+1, r, nums)

	return &segment[T]{
		l:            l,
		r:            r,
		sum:          left.sum + right.sum,
		leftSegment:  left,
		rightSegment: right,
	}
}

func (s *segment[T]) sumRange(l, r int) T {
	// Disjoint
	if r < s.l || l > s.r {
		return *new(T)
	}

	// Covers
	if l <= s.l && s.r <= r {
		// Covers
		return s.sum
	}

	// Else
	return s.leftSegment.sumRange(l, r) + s.rightSegment.sumRange(l, r)
}

////////////////////// Singly Linked List //////////////////////

// SinglyLinkedListNode is a linked list node with a pointer to the next node
type SinglyLinkedListNode[T any] struct {
	Val  T
	Next *SinglyLinkedListNode[T]
}

// NewSinglyLinkedListNode works in O(1) time, O(1) space
func NewSinglyLinkedListNode[T any](val T, next *SinglyLinkedListNode[T]) *SinglyLinkedListNode[T] {
	return &SinglyLinkedListNode[T]{
		Val:  val,
		Next: next,
	}
}

// NewSentinelSinglyLinkedListNode works in O(1) time, O(1) space
func NewSentinelSinglyLinkedListNode[T any]() *SinglyLinkedListNode[T] {
	return &SinglyLinkedListNode[T]{
		Val: *new(T),
	}
}

// NewSinglyLinkedList works in O(n) time, O(n) space
func NewSinglyLinkedList[T any](arr []T) *SinglyLinkedListNode[T] {
	headSentinel := NewSentinelSinglyLinkedListNode[T]()

	cur := headSentinel
	for _, e := range arr {
		cur.Next = NewSinglyLinkedListNode[T](e, nil)
		cur = cur.Next
	}

	return headSentinel
}

////////////////////// Stack //////////////////////

// Stack is a data structure that implements FIFO (first in, first out) interface
type Stack[T any] struct {
	arr []T
}

// NewEmptyStack works in O(1) time, O(1) space
func NewEmptyStack[T any]() *Stack[T] {
	return NewStackFromArray(make([]T, 0))
}

// NewStackFromArray works in O(n) time, O(n) space
func NewStackFromArray[T any](arr []T) *Stack[T] {
	return &Stack[T]{
		arr: arr,
	}
}

// Push works in O(1) time, O(1) space
func (s *Stack[T]) Push(value T) {
	s.arr = append(s.arr, value)
}

// Pop works in O(1) time, O(1) space
func (s *Stack[T]) Pop() T {
	val := s.arr[len(s.arr)-1]
	s.arr = s.arr[:len(s.arr)-1]
	return val
}

// Peek works in O(1) time, O(1) space
func (s *Stack[T]) Peek() T {
	return s.arr[len(s.arr)-1]
}

// GetSize works in O(1) time, O(1) space
func (s *Stack[T]) GetSize() int {
	return len(s.arr)
}

////////////////////// Switch Segment Tree //////////////////////

// SwitchSegmentTree is a data structure that contain array of switches (1 or 0).
// It can flip any switch range quickly for O(logn) time instead of usual O(n) time for arrays
type SwitchSegmentTree struct {
	root *switchSegment
}

// NewSwitchSegmentTree works in O(n) time, O(logn) space
func NewSwitchSegmentTree(switches []int) *SwitchSegmentTree {
	return &SwitchSegmentTree{
		root: newSwitchSegment(0, len(switches)-1, switches),
	}
}

// Flip works in O(logn) time, O(logn) space
func (t *SwitchSegmentTree) Flip(i int) {
	t.FlipRange(i, i)
}

// FlipRange works in O(logn) time, O(logn) space
func (t *SwitchSegmentTree) FlipRange(l, r int) {
	t.root.flipRange(l, r)
}

// GetRangeSum works in O(logn) time, O(logn) space
func (t *SwitchSegmentTree) GetRangeSum(l int, r int) int {
	return t.root.sumRange(l, r)
}

// GetFullRangeSum works in O(logn) time, O(logn) space
func (t *SwitchSegmentTree) GetFullRangeSum() int {
	return t.root.sumRange(t.root.l, t.root.r)
}

// IsActive works in O(logn) time, O(logn) space
func (t *SwitchSegmentTree) IsActive(i int) bool {
	return t.GetRangeSum(i, i) == 1
}

////////////////////// Switch Segment //////////////////////

type switchSegment struct {
	// l and r are the index bounds of a segment
	l, r         int
	sum, count   int
	leftSegment  *switchSegment
	rightSegment *switchSegment
	flipped      bool
}

func newSwitchSegment(l, r int, switches []int) *switchSegment {
	if l == r {
		return &switchSegment{
			l:     l,
			r:     r,
			sum:   switches[l],
			count: 1,
		}
	}

	m := l + (r-l)/2
	left := newSwitchSegment(l, m, switches)
	right := newSwitchSegment(m+1, r, switches)

	return &switchSegment{
		l:            l,
		r:            r,
		sum:          left.sum + right.sum,
		count:        left.count + right.count,
		leftSegment:  left,
		rightSegment: right,
	}
}

func (s *switchSegment) sumRange(l, r int) int {
	// Disjoint
	if r < s.l || l > s.r {
		return 0
	}

	// Covers
	if l <= s.l && s.r <= r {
		return s.sum
	}

	// Propagate forward if needed
	if s.flipped {
		s.leftSegment.flipRange(s.leftSegment.l, s.leftSegment.r)
		s.rightSegment.flipRange(s.rightSegment.l, s.rightSegment.r)
		s.flipped = !s.flipped
	}

	// Return sum
	return s.leftSegment.sumRange(l, r) + s.rightSegment.sumRange(l, r)
}

func (s *switchSegment) flipRange(l, r int) {
	// Disjoint
	if r < s.l || l > s.r {
		return
	}

	// Covers
	if l <= s.l && s.r <= r {
		s.sum = s.count - s.sum
		s.flipped = !s.flipped
		return
	}

	// Propagate forward if needed
	if s.flipped {
		s.leftSegment.flipRange(s.leftSegment.l, s.leftSegment.r)
		s.rightSegment.flipRange(s.rightSegment.l, s.rightSegment.r)
		s.flipped = false
	}

	// Flip what is needed
	s.leftSegment.flipRange(l, r)
	s.rightSegment.flipRange(l, r)
	s.sum = s.leftSegment.sum + s.rightSegment.sum
}

/////////////////// Trie Definition ///////////////////

// Trie is a data structure that stores multiple strings and allows to find substrings and string for O(n) time, O(1) space
type Trie struct {
	children map[rune]*Trie
	isEnd    bool
}

// NewEmptyTrie works in O(1) time, O(1) space
func NewEmptyTrie() *Trie {
	return NewTrieFromArray(make([]string, 0))
}

// NewTrieFromArray works in O(n*m) time, O(n*m) space, where n is the words count, and m is the length of the longest word
func NewTrieFromArray(words []string) *Trie {
	t := Trie{
		children: make(map[rune]*Trie),
		isEnd:    false,
	}

	for _, word := range words {
		t.Insert(word)
	}

	return &t
}

// Insert works in O(m) time, O(m) space
func (t *Trie) Insert(word string) {
	cur := t

	for _, char := range word {
		if _, ok := cur.children[char]; !ok {
			cur.children[char] = NewEmptyTrie()
		}
		cur = cur.children[char]
	}

	cur.isEnd = true
}

// ContainsWord works in O(m) time, O(m) space
func (t *Trie) ContainsWord(word string) bool {
	cur := t

	for _, char := range word {
		if _, ok := cur.children[char]; !ok {
			return false
		}
		cur = cur.children[char]
	}

	return cur.isEnd
}

// ContainsPrefix works in O(m) time, O(m) space
func (t *Trie) ContainsPrefix(prefix string) bool {
	cur := t

	for _, char := range prefix {
		if _, ok := cur.children[char]; !ok {
			return false
		}
		cur = cur.children[char]
	}

	return true
}

////////////////////// Union Find //////////////////////

type UnionFind struct {
	sizeMap        []int
	parentMap      []int
	componentCount int
	nodeCount      int
}

// NewUnionFind works in O(n) time, O(n) space
func NewUnionFind(nodeCount int) *UnionFind {
	sizeMap := make([]int, nodeCount)
	parentMap := make([]int, nodeCount)
	for i := 0; i < nodeCount; i++ {
		parentMap[i] = i // Self parent
		sizeMap[i] = 1   // Each component has originally only 1 node
	}

	return &UnionFind{
		sizeMap:        sizeMap,
		parentMap:      parentMap,
		componentCount: nodeCount,
		nodeCount:      nodeCount,
	}
}

// Union unionizes components containing nodes p and q, works in O(1) time, O(1) space.
func (uf *UnionFind) Union(p, q int) bool {
	// These nodes are already in the same group!
	if uf.AreNodesConnected(p, q) {
		return false
	}

	pRoot := uf.Find(p)
	qRoot := uf.Find(q)

	// Merge smaller component into the larger one.
	if uf.sizeMap[pRoot] < uf.sizeMap[qRoot] {
		uf.sizeMap[qRoot] += uf.sizeMap[pRoot]
		uf.parentMap[pRoot] = qRoot
		uf.sizeMap[pRoot] = 0
	} else {
		uf.sizeMap[pRoot] += uf.sizeMap[qRoot]
		uf.parentMap[qRoot] = pRoot
		uf.sizeMap[qRoot] = 0
	}

	// Since the roots found are different we know that the
	// number of components has decreased by one
	uf.componentCount--

	return true
}

// Find finds which component p belongs to, works in O(1) time and O(1) space.
func (uf *UnionFind) Find(node int) int {
	// Find the root of the component
	root := node
	for root != uf.parentMap[root] {
		root = uf.parentMap[root]
	}

	// Compress the path leading back to the root.
	// Doing this operation is called "path compression"
	// and is what gives us amortized time complexity.
	for node != root {
		next := uf.parentMap[node]
		uf.parentMap[node] = root
		node = next
	}

	return root
}

// AreNodesConnected works in O(1) time, O(1) space
func (uf *UnionFind) AreNodesConnected(p, q int) bool {
	return uf.Find(p) == uf.Find(q)
}

// GetComponentSize works in O(1) time, O(1) space
func (uf *UnionFind) GetComponentSize(p int) int {
	parentNode := uf.Find(p)
	return uf.sizeMap[parentNode]
}

// GetNodeCount works in O(1) time, O(1) space
func (uf *UnionFind) GetNodeCount() int {
	return uf.nodeCount
}

// GetComponentCount works in O(1) time, O(1) space
func (uf *UnionFind) GetComponentCount() int {
	return uf.componentCount
}


func GetIntegerLength(num int) int {
	if num == 0 {
		return 1
	}

	num = Abs(num)

	length := 0
	for num != 0 {
		num /= 10
		length++
	}

	return length
}

func GetIntegerDigit(num, position int) int {
	divider := int(math.Pow(10, float64(position)))
	return Abs(num) / divider % 10
}

////////////////////// Math functions //////////////////////

func Max[T Ordered](a, b T) T {
	if a > b {
		return a
	} else {
		return b
	}
}

func Min[T Ordered](a, b T) T {
	if a < b {
		return a
	} else {
		return b
	}
}

func Abs[T Ordered](a T) T {
	if a < 0 {
		return -a
	} else {
		return a
	}
}

////////////////////// Ordered //////////////////////

// Ordered can be replaced with constraints.Ordered from "golang.org/x/exp/constraints".
// But because leetcode.com doesn't allow to use external libs, so it was copypasted
type Ordered interface {
	~float32 | ~float64 |
		~int | ~int8 | ~int16 | ~int32 | ~int64 |
		~uint | ~uint8 | ~uint16 | ~uint32 | ~uint64
}
