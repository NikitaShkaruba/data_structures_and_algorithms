package main

import (
	"fmt"
	"os"
	"path/filepath"
)

// This file gets the content of all the src files, and concatenates them into one, putting them into a single package.
// The concatenated file should be pasted into leetcode.com and used easily

func main() {
	fmt.Println("Generation started")

	outputFile, err := createOutputFile()
	if err != nil {
		panic(fmt.Errorf("failed to create the output file: %w", err))
	}

	sourceFilePaths, err := getSourceFilePaths()
	if err != nil {
		panic(fmt.Errorf("failed to retrieve source file paths: %w", err))
	}

	err = concatenateSourceFiles(outputFile, sourceFilePaths)
	if err != nil {
		panic(fmt.Errorf("failed to concatenate source files: %w", err))
	}

	fmt.Println("Successfully generated build/leetcode_library.go")
}

func createOutputFile() (*os.File, error) {
	outputFile, err := os.Create("build/leetcode_library.go")
	if err != nil {
		return nil, err
	}

	fmt.Println("Created output file")
	return outputFile, err
}

const header = `package main

///////////////////////////////////////////////////////
//                    DO NOT EDIT                    //
// This file was automatically generated by build.go //
///////////////////////////////////////////////////////

`

func concatenateSourceFiles(outputFile *os.File, sourceFilePaths []string) error {
	fmt.Println("Writing output file parts:")

	_, err := outputFile.WriteString(header)
	if err != nil {
		return err
	}
	logOutputFilePart("[Header]")

	for _, path := range sourceFilePaths {
		logOutputFilePart(path)

		// TODO: write actual file content
		_, err := outputFile.WriteString(fmt.Sprintf("// Content from %s\n", path))
		if err != nil {
			return err
		}
	}

	return nil
}

func getSourceFilePaths() ([]string, error) {
	filePaths := make([]string, 0)

	err := filepath.Walk("src", func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}

		// Only pass .go files
		if len(path) < 3 || path[len(path)-3:] != ".go" {
			return nil
		}

		// Only pass not test.go files
		if len(path) > 8 && path[len(path)-8:] == "_test.go" {
			return nil
		}

		filePaths = append(filePaths, path)
		return nil
	})
	if err != nil {
		return nil, err
	}

	return filePaths, nil
}

func logOutputFilePart(part string) {
	fmt.Printf("- %s\n", part)
}
